cluster:
  name: elasticsearch

index:
    number_of_replicas: 0
    number_of_shards: 1
    analysis:
        analyzer:
            eulang:
                type: custom
                tokenizer: standard
                filter: [standard, lowercase, asciifolding]
            location:
                type: custom
                tokenizer: standard
                filter: [standard, lowercase, asciifolding]


transport.tcp.port : 9310
discovery.zen.ping.multicast.enabled: false

http.cors.enabled: true
http.cors.allow-origin: /https?:\/\/localhost(:[0-9]+)?/

readonlyrest:
    enable: true
    response_if_req_forbidden: Forbidden by ReadonlyREST ES plugin
    access_control_rules:

    - name: "Logstash can write and create its own indices"
      auth_key: logstash:logstash
      type: allow
      actions: ["indices:data/read/*","indices:data/write/*","indices:admin/template/*","indices:admin/create"]
      indices: ["logstash-*", "<no_index>"]

    - name: Kibana Server (we trust this server side component, full access granted via HTTP authentication)
      auth_key: admin:passwd3
      type: allow

    - name: Developer (reads only logstash indices, but can create new charts/dashboards)
      auth_key: dev:dev
      type: allow
      kibana_access: ro+
      indices: ["<no-index>", ".kibana*" "logstash*", "default"]

#    - name: Developer (reads only logstash indices, but can create new charts/dashboards)
#       auth_key: read:read
#       type: allow
#       kibana_access: ro
#       indices: ["<no-index>", ".kibana*", "logstash*", "default"]

#    - name: browser
#      type: allow
#      script: >
#            function onRequest(rc){
#               print("hello world from script!");
#               print(rc.getAction());
#               for each (i in rc.getIndices()){
#                print(i);
#               }
#               print(rc.getRequest().method());
#               print(rc.getRequest().path());
#               print(rc.getRemoteAddress());
#               print(rc.getContent());
#               //var body = JSON.parse(rc.getContent());
#               //print("some property inside the payload.. " + body.actions[0].add.alias);
#               return true;
#             };
#             function onResponse(rc){return true;}

#    - name: browser
#      type: allow
#      auth_key: user:pass
#      kibana_access: ro

#    - name: 3
#      type: allow
#      api_keys: [1234567890]
